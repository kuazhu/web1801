/*
	多行注释,编译后保留
*/
*{
	margin: 0;
	padding: 0;
}
//变量的定义
@color:#ff0;
@w:200px;
@h:100px;
div{
	margin-bottom: 5px;
}
//单行注释 编译后删除
body{
	background: #f1f1f1;
}
h1{
	color:@color;
}
a:hover{
	color:@color;
}
//变量的使用
.box1{
	width: @w;
	height: @h;
	background-color: @color;
}

.box2{
	//混合的基本使用
	.box1;
	font-size: 30px;
}

//带参数的混合
.border-radius(@border-width){
	-webkit-border-radius:@border-width;
	-ms-border-radius:@border-width;
	-moz-border-radius:@border-width;
	-o-border-radius:@border-width;
	border-radius: @border-width;
}

//带默认参数的混合
.border-radius-def(@border-width:10px){
	-webkit-border-radius:@border-width;
	-ms-border-radius:@border-width;
	-moz-border-radius:@border-width;
	-o-border-radius:@border-width;
	border-radius: @border-width;
}

.box3{
	.box1;
	border: 1px solid #000;
	//带参数的混合的使用
	.border-radius(40px);
}

.box4{
	.box1;
	border: 1px solid #000;
	//带参数的混合的使用
	.border-radius-def();
}
/*
基本三角形生成
.triangle{
	width: 0;
	height: 0;
	overflow: hidden;

	border-width: 10px;
	border-color: red transparent  transparent  transparent;
	border-style:solid;
}
*/

//匹配模式
.triangle(top,@w:10px,@c:red){
	border-width: @w;
	border-color: @c transparent  transparent  transparent;
}
.triangle(right,@w:10px,@c:red){
	border-width: @w;
	border-color: transparent @c transparent  transparent;
}
.triangle(bottom,@w:10px,@c:red){
	border-width: @w;
	border-color: transparent  transparent @c transparent;
}
.triangle(left,@w:10px,@c:red){
	border-width: @w;
	border-color: transparent  transparent  transparent @c;
}
//@_代表匹配任意值,注意后面的参数不能省略
.triangle(@_,@w:10px,@c:red){
	width: 0;
	height: 0;
	overflow: hidden;
	border-style:solid;	
}
.box5{
	.triangle(bottom,20px,#f10000);
}

//嵌套
.list{
	width: 100%;
	li{
		list-style: none;
		width: 100%;
		height: 30px;
		border-bottom: 1px dashed #ccc;
		box-sizing: border-box;
		padding:10px;
		span{
			float: left;
		}
		a{
			display: inline-block;
			float: right;
		}
		//& 代表上一层
		&:hover{
			background-color: #f10;
		}
	}
}
//运算
.fs(@s){
	//注意:符合的左右各必须有一个以上的空格;
	// font-size: @s * 10px;
	// font-size: @s + 10px;
	// font-size: @s / 10px;
	font-size: @s - 10px;
}

.box6{
	.fs(100px);
}

//避免编译
.box7{
	font-size: ~'calc(50px - 10px)';
	width: ~'calc(100px - 20px)';
}
//给混合添加!important的话,混合中所有的属性都有!important
.box8{
	.box1 !important;
}

//设置样式的混合
.setStyle(@attr,@value){
	@{attr}:unit(@value,px);
}

.box9{
	.setStyle(width,100);//width:100px;
	.setStyle(height,100);
}

